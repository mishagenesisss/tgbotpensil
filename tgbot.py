from telegram import Update, ForceReply
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import random
import datetime
import json
import logging
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
telegram_token = '7386664572:AAHu4G_xp_KW1osuxiHMge-xQebopTRhI0c'

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—ç–Ω—Å–∏–ª–µ
DATABASE_FILE = "growth_database.json"
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –¥—É—ç–ª–∏
DUEL_OFFERS_FILE = "duel_offers.json"
LOTTERY_DATA_FILE = 'lottery_data.json'  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–µ—Ä–µ–µ

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
users_growth = {}
duel_offers = {}
lottery_active = False  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª–æ—Ç–µ—Ä–µ–∏
lottery_end_time = None  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏
lottery_tickets = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –ª–æ—Ç–µ—Ä–µ—é

def log_message(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º."""
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{current_time}] {message}")

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(DATABASE_FILE, 'r') as f:
            data = json.load(f)
            log_message(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {data}")
            return {str(key): value for key, value in data.items()}
    except FileNotFoundError:
        log_message(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {DATABASE_FILE}")
        return {}

def save_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª."""
    global users_growth  
    with open(DATABASE_FILE, 'w') as f:
        json.dump(users_growth, f)

def load_duel_offers():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –¥—É—ç–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(DUEL_OFFERS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_duel_offers():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –¥—É—ç–ª–∏ –≤ —Ñ–∞–π–ª."""
    global duel_offers  
    with open(DUEL_OFFERS_FILE, 'w') as f:
        json.dump(duel_offers, f)

def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    user = update.effective_user
    update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
        reply_markup=ForceReply(selective=True),
    )

def handle_growth(user_id):
    global users_growth
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /–ø—ç–Ω—Å–∏–ª"""
    
    user_id = str(user_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É 
    current_date = datetime.date.today().strftime('%Y-%m-%d')
    
    if user_id in users_growth:
        if 'chikchik_used' in users_growth[user_id] and users_growth[user_id]['chikchik_used']:
            # Special case: If chikchik was used, allow growth even if it's the same day
            growth_today = random.randint(1, 10)
            users_growth[user_id]['length'] += growth_today
            users_growth[user_id]['last_measure_date'] = current_date
            del users_growth[user_id]['chikchik_used']  # Reset the flag
            save_data()
            message = f"@id{user_id}, –≤–∞—à –ø—ç–Ω—Å–∏–ª –≤—ã—Ä–æ—Å –Ω–∞ {growth_today} —Å–º. " \
                      f"–¢–µ–ø–µ—Ä—å –µ–≥–æ –¥–ª–∏–Ω–∞ {users_growth[user_id]['length']} —Å–º."
            return message
        elif users_growth[user_id]['last_measure_date'] == current_date:
            return "–í—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∏–∑–º–µ—Ä—è–ª–∏ —Å–≤–æ–π –ø—ç–Ω—Å–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!"
        else:
            # –ò–∑–º–µ–Ω—è–µ–º –¥–ª–∏–Ω—É, –µ—Å–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å
            growth_today = random.randint(1, 10)
            users_growth[user_id]['length'] += growth_today
            users_growth[user_id]['last_measure_date'] = current_date
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
        growth_today = random.randint(1, 10)
        users_growth[user_id] = {
            'length': growth_today,
            'last_measure_date': current_date
        }
    
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    message = f"@id{user_id}, –≤–∞—à –ø—ç–Ω—Å–∏–ª –≤—ã—Ä–æ—Å –Ω–∞ {growth_today} —Å–º. " \
              f"–¢–µ–ø–µ—Ä—å –µ–≥–æ –¥–ª–∏–Ω–∞ {users_growth[user_id]['length']} —Å–º."
    return message

def handle_top_chat():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /—Ç–æ–ø—á–∞—Ç–∞"""
    
    sorted_users = sorted(users_growth.items(), key=lambda item: item[1]['length'], reverse=True)
    
    top_chat_message = "üèÜ –¢–æ–ø-—á–∞—Ç –ø–æ –ø—ç–Ω—Å–∏–ª—É:\n"
    for i, (user_id, data) in enumerate(sorted_users[:10]):
        top_chat_message += f"{i+1}. @id{user_id} - {data['length']} —Å–º\n"
    
    return top_chat_message

def handle_casino(user_id, bet):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /–∫–∞–∑–∏–Ω–æ —Å —Ä–∞–≤–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à –∏ –ø—Ä–æ–∏–≥—Ä—ã—à"""
    
    user_id = str(user_id)  # Ensure user_id is a string

    if user_id not in users_growth:
        return "–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ /–ø—ç–Ω—Å–∏–ª. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—ç–Ω—Å–∏–ª!"
    
    if bet <= 0:
        return "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!"
    
    if users_growth[user_id]['length'] < bet:
        return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—ç–Ω—Å–∏–ª–∞ –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏!"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ 0 –∏–ª–∏ 1
    # 0 - –ø—Ä–æ–∏–≥—Ä—ã—à, 1 - –≤—ã–∏–≥—Ä—ã—à
    result = random.randint(0, 1)  
    
    if result == 1:
        users_growth[user_id]['length'] += bet
        result_message = f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í–∞—à –ø—ç–Ω—Å–∏–ª —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ {bet} —Å–º."
    else:
        users_growth[user_id]['length'] -= bet
        result_message =  f"üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É –≤ {bet} —Å–º."
    
    save_data()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    return result_message

def handle_chikchik(user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /—á–∏–∫—á–∏–∫"""
    
    user_id = str(user_id)  # Ensure user_id is a string
    
    if user_id not in users_growth:
        return "–£ –≤–∞—Å –∏ —Ç–∞–∫ –Ω–µ—Ç –ø—ç–Ω—Å–∏–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /–ø—ç–Ω—Å–∏–ª"
    
    if users_growth[user_id]['length'] == 0:
        return "–í–∞—à –ø—ç–Ω—Å–∏–ª –∏ —Ç–∞–∫ —É–∂–µ —Å–ª–æ–º–∞–Ω! üò± –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /–ø—ç–Ω—Å–∏–ª"
    
    users_growth[user_id]['length'] = 0
    users_growth[user_id]['chikchik_used'] = True  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ "chikchik_used"
    save_data()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    return "üò® –í–∞—à –ø—ç–Ω—Å–∏–ª –∏—Å—á–µ–∑! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /–ø—ç–Ω—Å–∏–ª"

def handle_help():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /—Ö–µ–ª–ø"""
    help_text = "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n" \
                "/–ø—ç–Ω—Å–∏–ª - –∏–∑–º–µ—Ä—è–µ—Ç –≤–∞—à –ø—ç–Ω—Å–∏–ª\n" \
                "/–∫–∞–∑–∏–Ω–æ [—á–∏—Å–ª–æ] - –∏–≥—Ä–∞ –Ω–∞ –≤–∞—à –ø—ç–Ω—Å–∏–ª\n" \
                "/—Ç–æ–ø—á–∞—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—ç–Ω—Å–∏–ª—É\n" \
                "/—á–∏–∫—á–∏–∫ - —É–¥–∞–ª—è–µ—Ç –≤–∞—à –ø—ç–Ω—Å–∏–ª\n" \
                "/—Ö–µ–ª–ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
                "/–¥—É—ç–ª—å [—Å—Ç–∞–≤–∫–∞] - –±—Ä–æ—Å–∞–µ—Ç –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å\n" \
                "/–¥—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç—å - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥—É—ç–ª—å\n" \
                "/–¥—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å - –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –¥—É—ç–ª—å"
    return help_text

def handle_my_growth(user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /—è"""
    user_id = str(user_id)
    if user_id in users_growth:
        user_length = users_growth[user_id]['length']
        return f"–î–ª–∏–Ω–∞ –≤–∞—à–µ–≥–æ –ø—ç–Ω—Å–∏–ª–∞: {user_length} —Å–º."
    else:
        return "–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ /–ø—ç–Ω—Å–∏–ª. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—ç–Ω—Å–∏–ª!"

def handle_duel(user_id, message_text, peer_id):
    global duel_offers
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /–¥—É—ç–ª—å"""

    user_id = str(user_id)

    try:
        bet = int(message_text.split()[1])
    except (IndexError, ValueError):
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–¥—É—ç–ª—å [—Å—Ç–∞–≤–∫–∞]"

    if user_id not in users_growth:
        return "–£ –≤–∞—Å –Ω–µ—Ç –ø—ç–Ω—Å–∏–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /–ø—ç–Ω—Å–∏–ª."

    if users_growth[user_id]['length'] < bet:
        return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—ç–Ω—Å–∏–ª–∞ –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏!"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥—É—ç–ª–∏
    duel_offers[peer_id] = {
        "challenger_id": user_id,
        "bet": bet,
        "timestamp": time.time() + 300,  # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥—É—ç–ª–∏ (5 –º–∏–Ω—É—Ç)
        "accepted": False  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á "accepted"
    }
    save_duel_offers()

    user_info = vk.users.get(user_ids=user_id)[0]
    user_name = user_info['first_name']

    return f"@id{user_id} ({user_name}) –±—Ä–æ—Å–∏–ª –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å! –°—Ç–∞–≤–∫–∞: {bet} —Å–º. \n" \
           f"–ù–∞–ø–∏—à–∏—Ç–µ /–¥—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç—å, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤."

def handle_accept_duel(user_id, peer_id):
    global duel_offers
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /–¥—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç—å"""

    user_id = str(user_id)

    if peer_id not in duel_offers:
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥—É—ç–ª–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ."

    if duel_offers[peer_id]["challenger_id"] == user_id:
        return "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –¥—É—ç–ª—å!"

    if user_id not in users_growth:
        return "–£ –≤–∞—Å –Ω–µ—Ç –ø—ç–Ω—Å–∏–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /–ø—ç–Ω—Å–∏–ª."

    if users_growth[user_id]['length'] < duel_offers[peer_id]["bet"]:
        return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—ç–Ω—Å–∏–ª–∞ –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏!"

    if time.time() > duel_offers[peer_id]['timestamp']:
        del duel_offers[peer_id]
        save_duel_offers()
        return "–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏ –∏—Å—Ç–µ–∫–ª–æ."

    challenger_id = duel_offers[peer_id]["challenger_id"]
    bet = duel_offers[peer_id]["bet"]

    # –ü—Ä–æ–≤–æ–¥–∏–º –¥—É—ç–ª—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞
    duel_result(challenger_id, user_id, bet, peer_id)

def duel_result(challenger_id, user_id, bet, peer_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏"""

    global users_growth, duel_offers

    challenger_id = str(challenger_id)
    user_id = str(user_id)

    challenger_info = vk.users.get(user_ids=challenger_id)[0]
    user_info = vk.users.get(user_ids=user_id)[0]
    
    challenger_name = challenger_info['first_name']  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–¥–µ—Å—å
    user_name = user_info['first_name']              # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–¥–µ—Å—å

    result = random.randint(0, 1)

    if result == 1:
        winner_id = challenger_id
        loser_id = user_id
        winner_name = challenger_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤—ã—à–µ
        loser_name = user_name        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤—ã—à–µ
    else:
        winner_id = user_id
        loser_id = challenger_id
        winner_name = user_name        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤—ã—à–µ
        loser_name = challenger_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –≤—ã—à–µ

    users_growth[winner_id]['length'] += bet
    users_growth[loser_id]['length'] -= bet
    save_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥—É—ç–ª–∏
    vk.messages.send(
        peer_id=peer_id,
        message=f"üéâ @id{winner_id} ({winner_name}) –≤—ã–∏–≥—Ä–∞–ª –¥—É—ç–ª—å!\n"
                f"üòî @id{loser_id} ({loser_name}) –ø—Ä–æ–∏–≥—Ä–∞–ª –¥—É—ç–ª—å!",
        random_id=random.randint(1, 2*31)
    )

    del duel_offers[peer_id]
    save_duel_offers()

def check_and_handle_duels(peer_id, from_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    global duel_offers
    log_message(f"check_and_handle_duels: duel_offers = {duel_offers}")
    if peer_id in duel_offers and duel_offers[peer_id]["accepted"]:
        log_message(f"check_and_handle_duels: Found active duel")
        challenger_id = duel_offers[peer_id]["challenger_id"]
        bet = duel_offers[peer_id]["bet"]
        duel_result(challenger_id, from_id, bet, peer_id)
        


def handle_give(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /–¥–∞—Ç—å."""
    global users_growth
    user_id = str(update.effective_user.id)
    message_text = update.message.text.lower()

    try:
        parts = message_text.split()
        if len(parts) != 3:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–¥–∞—Ç—å id–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ"

        recipient_id = parts[1]
        amount = int(parts[2])

        if recipient_id not in users_growth:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        if user_id not in users_growth:
            return "–£ –≤–∞—Å –Ω–µ—Ç –ø—ç–Ω—Å–∏–ª–∞."
        if users_growth[user_id]['length'] < amount:
            return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—ç–Ω—Å–∏–ª–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏."
        if amount <= 0:
            return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è."

        users_growth[user_id]['length'] -= amount
        users_growth[recipient_id]['length'] += amount
        save_data()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–¥–∞—á–∏

        user_info = context.bot.get_user_profile_photos(user_id)
        user_name = user_info.first_name
        recipient_info = context.bot.get_user_profile_photos(recipient_id)
        recipient_name = recipient_info.first_name
        return f"üéâ @{user_name} –ø–µ—Ä–µ–¥–∞–ª {amount} —Å–º @{recipient_name}!"

    except (IndexError, ValueError):
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–¥–∞—Ç—å id–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ"

def handle_give_pencil(from_id, message_text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /–≤—ã–¥–∞—Ç—å, —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    global users_growth
    from_id = str(from_id)
    message_parts = message_text.split()
    
    if from_id != '7182691827':  # –ó–∞–º–µ–Ω–∏—Ç–µ '378134543' –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        return "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
    
    if len(message_parts) != 3:
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–≤—ã–¥–∞—Ç—å id–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ"

    try:
        recipient_id = int(message_parts[1])
        amount = int(message_parts[2])
    except ValueError:
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."
    
    recipient_id = str(recipient_id)

    if recipient_id not in users_growth:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω."

    users_growth[recipient_id]['length'] += amount
    save_data()

    log_message(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {from_id} –≤—ã–¥–∞–ª {amount} —Å–º –ø—ç–Ω—Å–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    return f"–í—ã–¥–∞–ª–∏ {amount} —Å–º –ø—ç–Ω—Å–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {recipient_id}"

def handle_statistics():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    global users_growth, user_quests
    
    total_players = len(users_growth)
    total_pencil = sum(user['length'] for user in users_growth.values())
    completed_quests = sum(1 for user_data in user_quests.values() if user_data['current_quest'] is None)

    return f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {total_players}\n" \
           f"–û–±—â–∞—è —Å—É–º–º–∞ –ø—ç–Ω—Å–∏–ª–∞: {total_pencil} —Å–º\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤: {completed_quests}"

def handle_lottery_start():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /–ª–æ—Ç–µ—Ä–µ—è, –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ—Ç–µ—Ä–µ—é"""
    global lottery_end_time, lottery_tickets, lottery_active

    if lottery_active:
        return "–õ–æ—Ç–µ—Ä–µ—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ñ–¥–∏—Ç–µ –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è."

    lottery_active = True
    lottery_end_time = datetime.datetime.now() + datetime.timedelta(hours=1)
    lottery_end_time = lottery_end_time.timestamp()
    print(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏: {datetime.datetime.fromtimestamp(lottery_end_time)}")
    lottery_tickets = {}
    
    save_lottery_data()

    return "–õ–æ—Ç–µ—Ä–µ—è –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞–ø–∏—à–∏—Ç–µ /–±–∏–ª–µ—Ç, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç –∑–∞ 10 —Å–º. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω —á–µ—Ä–µ–∑ 1 —á–∞—Å."

def save_lottery_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–µ—Ä–µ–µ –≤ —Ñ–∞–π–ª"""
    global lottery_active, lottery_end_time, lottery_tickets
    data = {
        'active': lottery_active,
        'end_time': lottery_end_time,
        'tickets': lottery_tickets 
    }
    with open(LOTTERY_DATA_FILE, 'w') as f:
        json.dump(data, f)
    log_message(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ—Ä–µ–µ –≤ —Ñ–∞–π–ª: {LOTTERY_DATA_FILE}")

def load_lottery_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–µ—Ä–µ–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    global lottery_active, lottery_end_time, lottery_tickets
    try:
        with open(LOTTERY_DATA_FILE, 'r') as f:
            data = json.load(f)
            lottery_active = data['active']
            lottery_end_time = data.get('end_time')
            lottery_tickets = data.get('tickets', {})
            log_message(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ—Ä–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {LOTTERY_DATA_FILE}")
    except FileNotFoundError:
        log_message(f"–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ª–æ—Ç–µ—Ä–µ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω: {LOTTERY_DATA_FILE}")

def handle_buy_ticket(user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /–±–∏–ª–µ—Ç"""
    global users_growth, lottery_tickets, lottery_active, lottery_end_time
     
    user_id = str(user_id)
     
    if not lottery_active:
        return "–õ–æ—Ç–µ—Ä–µ—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /–ª–æ—Ç–µ—Ä–µ—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –µ–µ."
     
    if users_growth[user_id]['length'] < 10:
        return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—ç–Ω—Å–∏–ª–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 10 —Å–º)."

    users_growth[user_id]['length'] -= 10
    if user_id not in lottery_tickets:
        lottery_tickets[user_id] = True
    save_data()
    save_lottery_data()
    return "–í—ã –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç! –£–¥–∞—á–∏ –≤ –ª–æ—Ç–µ—Ä–µ–µ!"

def handle_lottery_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –ª–æ—Ç–µ—Ä–µ—è, –∏ –æ–±—ä—è–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥"""
    global lottery_tickets, lottery_end_time, lottery_active, users_growth

    while True:
        current_datetime = datetime.datetime.fromtimestamp(time.time())
        if lottery_active and lottery_end_time is not None and current_datetime >= datetime.datetime.fromtimestamp(lottery_end_time):
            winner_id = random.choice(list(lottery_tickets.keys()))
            total_tickets = len(lottery_tickets)
            lottery_pencil = total_tickets * 10

            users_growth[winner_id]['length'] += lottery_pencil
            save_data()

            try:
                context.bot.send_message(
                    chat_id=your_chat_id,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
                    text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ª–æ—Ç–µ—Ä–µ–∏: @{winner_id}! –í–∞–º –¥–æ—Å—Ç–∞–ª—Å—è {lottery_pencil} —Å–º –ø—ç–Ω—Å–∏–ª–∞!üéâ",
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            log_message(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ª–æ—Ç–µ—Ä–µ–∏: {winner_id}")
            lottery_tickets.clear()
            lottery_end_time = None

    


 
def determine_winner(game, vk):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã –ö–ú–ë."""
    winner = None
    if game['player1_choice'] == game['player2_choice']:
        winner = '–ù–∏—á—å—è'
    elif (game['player1_choice'] == '–∫–∞–º–µ–Ω—å' and game['player2_choice'] == '–Ω–æ–∂–Ω–∏—Ü—ã') or \
         (game['player1_choice'] == '–Ω–æ–∂–Ω–∏—Ü—ã' and game['player2_choice'] == '–±—É–º–∞–≥–∞') or \
         (game['player1_choice'] == '–±—É–º–∞–≥–∞' and game['player2_choice'] == '–∫–∞–º–µ–Ω—å'):
        winner = game['player1']
    else:
        winner = game['player2']
 
    game['winner'] = winner
 
    player1_info = vk.users.get(user_ids=game['player1'])[0]
    player2_info = vk.users.get(user_ids=game['player2'])[0]
 
    vk.messages.send(peer_id=game['player1'], message=f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! {winner} ({player1_info['first_name']} –µ—Å–ª–∏ –≤—ã –ø–æ–±–µ–¥–∏–ª–∏)!", random_id=random.randint(1, 2*31))
    vk.messages.send(peer_id=game['player2'], message=f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! {winner} ({player2_info['first_name']} –µ—Å–ª–∏ –≤—ã –ø–æ–±–µ–¥–∏–ª–∏)!", random_id=random.randint(1, 2*31))
 
    del rps_game[game['player1']]
    
def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    message_text = update.message.text.lower()

    log_message(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{message_text}'")

    response_message = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    try:
        if message_text == '/–ø—ç–Ω—Å–∏–ª':
            response_message = handle_growth(user_id)
        elif message_text == '/—Ç–æ–ø—á–∞—Ç–∞':
            response_message = handle_top_chat()
        elif message_text.startswith('/–∫–∞–∑–∏–Ω–æ '):
            try:
                bet = int(message_text.split(' ')[1])
                response_message = handle_casino(user_id, bet)
            except (IndexError, ValueError):
                response_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–∫–∞–∑–∏–Ω–æ [—á–∏—Å–ª–æ]"
        elif message_text == '/—á–∏–∫—á–∏–∫':
            response_message = handle_chikchik(user_id)
        elif message_text == '/—Ö–µ–ª–ø':
            response_message = handle_help()
        elif message_text.startswith('/–¥—É—ç–ª—å'):
            response_message = handle_duel(user_id, message_text)
        elif message_text == '/—è':
            response_message = handle_my_growth(user_id)
        elif message_text.startswith('/–¥–∞—Ç—å '):
            response_message = handle_give(update, user_id)
        elif message_text.startswith('/–≤—ã–¥–∞—Ç—å '):
            response_message = handle_give_pencil(user_id, message_text)
        elif message_text == '/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            response_message = handle_statistics()
        elif message_text == '/–ª–æ—Ç–µ—Ä–µ—è':
            response_message = handle_lottery_start()
        elif message_text == '/–±–∏–ª–µ—Ç':
            response_message = handle_buy_ticket(user_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if response_message:
            log_message(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: '{response_message}'")
            context.bot.send_message(chat_id=user_id, text=response_message)
        else:
            log_message(f"–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

if __name__ == '__main__':
    log_message("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    updater = Updater(token=telegram_token, use_context=True)

    dp = updater.dispatcher

    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

handle_message()
